由於工學院運算電腦在執行上出現問題，昨日5/11已向SA提出問題
而在今日5/12尚未解決，不過由於不想因此遲交太久，所以先交上
可執行且成功的檔案及截圖。其他檔案待SA解決後，於日後補上。

在讀檔上，每個檔案大致相同，因此一併說明，首先將CroppedYale
定為原始路經，接著一層一層讀入目錄，讀到檔案存到[]中，接著將
這些目錄做預處理，及轉成nparray格式存入[]中。

load weight:
目前成功的只有load weight的檔案，由於model.h5的層數與vgg16.py
給得層數並不相同，因此需先將不要的fc層數註解掉，然後可以讀入
model.h5，接著再將最上面一層fc加上去，最後將讀入的圖片用分為
test train 用fit進行訓練，由於參數沒有多試因此都隨便調，
epoch設為30張，最後看成功率到多少，另外設了一個early-stop的參數，
看看有沒有發生earlystop。


random: 程式碼及結果日後補上
由於不需要loadweight所以不用處理層數問題，直接用範例程式碼的
vgg16.py上的層數即可，但是規定說只用一層fc所以將其他fc層註解掉
其他在每層中加入random_uniform，其餘部分則與其他相同。



Lecture 8 imporve: 程式碼及結果日後補上
第8張有多種最佳化方式，不過由於作業規定只用第一層fc，其他層被註解掉
，因此可以直接將註解拿掉，就可以達到增加層數的功能了，所以將random的
程式碼將原本註解掉的fc層復原即可



由於不太熟悉ml工具的使用因此參考了幾個網站
此處只列出幾個關於架構及randomweight設置的網站:
https://hk.saowen.com/a/9587808524251938ffd7f2b4326127b8a88109090d78dedfc42c2ff8973b02ae
https://keras-cn.readthedocs.io/en/latest/other/initializations/
https://blog.csdn.net/sinat_26917383/article/details/72861152
https://blog.csdn.net/sinat_26917383/article/details/72857454